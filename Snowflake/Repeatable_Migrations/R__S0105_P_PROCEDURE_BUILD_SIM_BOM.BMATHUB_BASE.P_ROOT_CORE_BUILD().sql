CREATE OR REPLACE PROCEDURE SIMP_BOM.BMATHUB_BASE.P_ROOT_CORE_BUILD()
RETURNS STRING 
LANGUAGE SQL
AS 
$$
  BEGIN
   MERGE INTO SIMP_BOM.BMATHUB_BASE.T_COMPRESS_BOM_CORE AS COMPRESS_BOM_CORE
   USING (
     SELECT
        t1.INPUT_ITEM_ID,
        t1.ITEM_CLASS_NM,
        t3.INPUT_ITEM_ID AS ANCHOR_ITEM,
        CASE 
            WHEN t1.ITEM_CLASS_NM = 'UPI_SORT' THEN 'VG_SO'
            WHEN t1.ITEM_CLASS_NM = 'UPI_DIEPREP' THEN 'VG_DP'
            WHEN t1.ITEM_CLASS_NM = 'IC' THEN 'VG_FG'
            ELSE 'UNKNOWN_LOC'
        END AS LOC
    FROM SIMP_BOM.BMATHUB_BASE.T_ORIG_BOM_ROOT t1
    JOIN SIMP_BOM.BMATHUB_BASE.T_ORIG_BOM_ROOT t2 ON t1.INPUT_ITEM_ID = t2.OUTPUT_ITEM_ID
    JOIN SIMP_BOM.BMATHUB_BASE.T_ORIG_BOM_ROOT t3 ON t2.INPUT_ITEM_ID = t3.OUTPUT_ITEM_ID
    WHERE 
        t1.ITEM_CLASS_NM = 'IC' 
        AND t2.ITEM_CLASS_NM = 'UPI_DIEPREP' 
        AND t3.ITEM_CLASS_NM = 'UPI_SORT'
  ) AS SOURCE
  ON COMPRESS_BOM_CORE.ITEM = SOURCE.INPUT_ITEM_ID  
  WHEN MATCHED THEN
    UPDATE SET
        COMPRESS_BOM_CORE.ITEM_CLASS_NM = SOURCE.ITEM_CLASS_NM,
        COMPRESS_BOM_CORE.ANCHOR_ITEM_ID = SOURCE.ANCHOR_ITEM,
        COMPRESS_BOM_CORE.BOM_NUM = SIMP_BOM.BMATHUB_BASE.BOM_NUM_SEQ.NEXTVAL,
        COMPRESS_BOM_CORE.LOC = SOURCE.LOC,
        COMPRESS_BOM_CORE.CREATE_DTM = CURRENT_TIMESTAMP,
        COMPRESS_BOM_CORE.CREATE_USER = 'SYSTEM'
  WHEN NOT MATCHED THEN
    INSERT (
        ITEM,
        ITEM_CLASS_NM,
        ANCHOR_ITEM_ID,
        BOM_NUM,
        LOC,
        CREATE_DTM,
        CREATE_USER
    ) VALUES (
        SOURCE.INPUT_ITEM_ID,
        SOURCE.ITEM_CLASS_NM,
        SOURCE.ANCHOR_ITEM,
        SIMP_BOM.BMATHUB_BASE.BOM_NUM_SEQ.NEXTVAL,
        SOURCE.LOC,
        CURRENT_TIMESTAMP,
        'SYSTEM'
    );

    RETURN 'Success';
  END;
$$;

CALL SIMP_BOM.BMATHUB_BASE.P_ROOT_CORE_BUILD(); 